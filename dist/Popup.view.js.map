{"version":3,"file":"Popup.view.js","sourceRoot":"","sources":["../src/Popup.view.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAC,SAAS,EAAC,MAAM,OAAO,CAAC;AACvC,OAAO,EAAC,IAAI,EAAE,UAAU,EAAC,MAAM,cAAc,CAAC;AAC9C,OAAO,QAAQ,EAAE,EACf,gBAAgB,EAChB,cAAc,EACd,UAAU,GACX,MAAM,yBAAyB,CAAC;AASjC,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,EACxB,QAAQ,EACR,aAAa,GAAG,SAAS,EACzB,eAAe,GAAG,GAAG,EACrB,QAAQ,GACQ,EAAE,EAAE;IACpB,MAAM,IAAI,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;IACnC,MAAM,MAAM,GAAG,gBAAgB,CAAC,GAAG,EAAE;QACnC,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACnC,OAAO;YACL,OAAO,EAAE,UAAU,CAAC,OAAO,EAAE,EAAC,QAAQ,EAAE,GAAG,EAAC,CAAC;SAC9C,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,OAAO,GAAG,EAAE;YACV,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACrB,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;IAEX,OAAO,CACL,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAC1C;MAAA,CAAC,QAAQ,IAAI,CACX,CAAC,IAAI,CACH,KAAK,CAAC,CAAC;gBACL,MAAM,CAAC,QAAQ;gBACf,EAAC,eAAe,EAAE,aAAa,EAAE,OAAO,EAAE,eAAe,EAAC;aAC3D,CAAC,EACF,CACH,CACD;MAAA,CAAC,QAAQ,CACX;IAAA,EAAE,QAAQ,CAAC,IAAI,CAAC,CACjB,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;IAC/B,IAAI,EAAE;QACJ,QAAQ,EAAE,UAAU;QACpB,GAAG,EAAE,CAAC;QACN,IAAI,EAAE,CAAC;QACP,KAAK,EAAE,CAAC;QACR,MAAM,EAAE,CAAC;QACT,IAAI,EAAE,CAAC;QACP,cAAc,EAAE,QAAQ;QACxB,UAAU,EAAE,QAAQ;QACpB,OAAO,EAAE,CAAC;KACX;IACD,QAAQ,EAAE;QACR,QAAQ,EAAE,UAAU;QACpB,IAAI,EAAE,CAAC;QACP,KAAK,EAAE,MAAM;QACb,MAAM,EAAE,MAAM;QACd,2BAA2B;QAC3B,OAAO,EAAE,CAAC;KACX;CACF,CAAC,CAAC","sourcesContent":["import React, {useEffect} from 'react';\nimport {View, StyleSheet} from 'react-native';\nimport Animated, {\n  useAnimatedStyle,\n  useSharedValue,\n  withTiming,\n} from 'react-native-reanimated';\n\nexport interface IPopupViewProps {\n  backdrop?: boolean;\n  backdropColor?: string;\n  backdropOpacity?: number;\n  children: React.ReactNode;\n}\n\nexport const PopupView = ({\n  backdrop,\n  backdropColor = '#000000',\n  backdropOpacity = 0.2,\n  children,\n}: IPopupViewProps) => {\n  const show = useSharedValue(false);\n  const fadeIn = useAnimatedStyle(() => {\n    const opacity = show.value ? 1 : 0;\n    return {\n      opacity: withTiming(opacity, {duration: 300}),\n    };\n  });\n\n  useEffect(() => {\n    show.value = true;\n    return () => {\n      show.value = false;\n    };\n  }, [show]);\n\n  return (\n    <Animated.View style={[styles.root, fadeIn]}>\n      {backdrop && (\n        <View\n          style={[\n            styles.backdrop,\n            {backgroundColor: backdropColor, opacity: backdropOpacity},\n          ]}\n        />\n      )}\n      {children}\n    </Animated.View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  root: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    opacity: 0,\n  },\n  backdrop: {\n    position: 'absolute',\n    flex: 1,\n    width: '100%',\n    height: '100%',\n    // backgroundColor: '#000',\n    opacity: 1,\n  },\n});\n"]}