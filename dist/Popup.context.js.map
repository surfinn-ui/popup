{"version":3,"file":"Popup.context.js","sourceRoot":"","sources":["../src/Popup.context.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, {\n  createContext,\n  ReactNode,\n  useCallback,\n  useContext,\n  useMemo,\n  useReducer,\n} from 'react';\nimport {PopupView} from './Popup.view';\nimport uuid from 'surfinn-uuid';\n\ntype TPopupId = string;\n\nlet order = 0;\n\nexport interface IPopupState {\n  /** private 팝업 ID */\n  id?: TPopupId;\n  /** 팝업 보임 / 숨김 */\n  show?: boolean;\n  /** 백드롭 보임 / 숨김 - 기본값 `false` */\n  backdrop?: boolean;\n  /** 백드롭 색상 - 기본값 `\"#000000\"` */\n  backdropColor?: string;\n  /** 백드롭 투명도 - 기본값 `0.2` */\n  backdropOpacity?: number;\n  /** private 팝업 순서 - 팝업의 순서는 open 하는 순서대로 증가한다. */\n  order?: number;\n  /** 팝업 내용 */\n  children: ReactNode;\n}\n\nconst initialStates: IPopupState[] = [];\n\nconst reducer = (state: any, action: any) => {\n  let Popup = null;\n  switch (action.type) {\n    case 'ADD':\n      return [\n        ...state,\n        {\n          id: action.id,\n          show: false,\n          children: action.children,\n          backdrop: action.backdrop,\n          backdropColor: action.backdropColor,\n          backdropOpacity: action.backdropOpacity,\n          order: -1,\n        },\n      ];\n\n    case 'REMOVE':\n      return state.filter((_Popup: IPopupState) => _Popup.id !== action.id);\n\n    case 'OPEN':\n      Popup = state.find((_Popup: IPopupState) => _Popup.id === action.id);\n      if (Popup) {\n        return [\n          ...state.filter((_Popup: IPopupState) => _Popup.id !== action.id),\n          {\n            // @ts-ignore\n            ...Popup,\n            show: true,\n            order: order++,\n          },\n        ];\n      } else {\n        return state;\n      }\n\n    case 'CLOSE':\n      Popup = state.find((_Popup: IPopupState) => _Popup.id === action.id);\n      if (Popup) {\n        return [\n          ...state.filter((_Popup: IPopupState) => _Popup.id !== action.id),\n          {\n            // @ts-ignore\n            ...Popup,\n            show: false,\n          },\n        ];\n      } else {\n        return state;\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport interface IPopupContext {\n  /** 팝업 추가 - 추가한 팝업은 오픈하기 전까지 보이지 않는다. 팝업ID를 반환한다. */\n  add: (state: IPopupState) => string;\n  /** 팝업 제거 - 팝업을 제거한다. 제거한 팝업은 다시 사용할 수 없다. */\n  remove: (id: string) => void;\n  /** 팝업 오픈 - 팝업을 오픈한다. */\n  open: (id: string) => void;\n  /** 팝업 닫기 - 팝업을 닫는다. */\n  close: (id: string) => void;\n}\n\nexport const PopupContext = createContext<IPopupContext | null>(null);\n\nexport const usePopup = () => useContext(PopupContext);\n\nexport interface IPopupProviderProps {\n  children: ReactNode;\n}\n\nexport const PopupProvider = ({children}: IPopupProviderProps) => {\n  const [states, dispatch] = useReducer(reducer, initialStates);\n\n  const add = useCallback((state: IPopupState) => {\n    const id = uuid.v4();\n    dispatch({type: 'ADD', ...state, id});\n    return id;\n  }, []);\n\n  const remove = useCallback((id: string) => {\n    dispatch({type: 'REMOVE', id});\n  }, []);\n\n  const open = useCallback((id: string) => {\n    dispatch({type: 'OPEN', id});\n  }, []);\n\n  const close = useCallback((id: string) => {\n    dispatch({type: 'CLOSE', id});\n  }, []);\n\n  const context: IPopupContext = useMemo(\n    () => ({\n      add,\n      remove,\n      open,\n      close,\n    }),\n    [add, remove, open, close],\n  );\n  return (\n    <PopupContext.Provider value={context}>\n      {children}\n      {states\n        .filter((popup: IPopupState) => popup.show)\n        .sort((a: IPopupState, b: IPopupState) => a.order! - b.order!)\n        .map((popup: IPopupState) => {\n          return (\n            <PopupView\n              key={popup.id}\n              backdrop={popup.backdrop}\n              backdropColor={popup.backdropColor}\n              backdropOpacity={popup.backdropOpacity}>\n              {popup.children}\n            </PopupView>\n          );\n        })}\n    </PopupContext.Provider>\n  );\n};\n"]}